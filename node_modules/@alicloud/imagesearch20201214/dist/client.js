"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const oss_client_1 = __importStar(require("@alicloud/oss-client")), $OSS = oss_client_1;
const $RPC = __importStar(require("@alicloud/rpc-client"));
const openplatform20191219_1 = __importStar(require("@alicloud/openplatform20191219")), $OpenPlatform = openplatform20191219_1;
const $OSSUtil = __importStar(require("@alicloud/oss-util"));
const $FileForm = __importStar(require("@alicloud/tea-fileform"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class DeleteImageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceName: 'InstanceName',
            productId: 'ProductId',
            picName: 'PicName',
        };
    }
    static types() {
        return {
            instanceName: 'string',
            productId: 'string',
            picName: 'string',
        };
    }
}
exports.DeleteImageRequest = DeleteImageRequest;
class DeleteImageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'Message',
            requestId: 'RequestId',
            code: 'Code',
            success: 'Success',
        };
    }
    static types() {
        return {
            message: 'string',
            requestId: 'string',
            code: 'number',
            success: 'boolean',
        };
    }
}
exports.DeleteImageResponseBody = DeleteImageResponseBody;
class DeleteImageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteImageResponseBody,
        };
    }
}
exports.DeleteImageResponse = DeleteImageResponse;
class AddImageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceName: 'InstanceName',
            categoryId: 'CategoryId',
            productId: 'ProductId',
            picName: 'PicName',
            picContent: 'PicContent',
            crop: 'Crop',
            region: 'Region',
            customContent: 'CustomContent',
            intAttr: 'IntAttr',
            strAttr: 'StrAttr',
        };
    }
    static types() {
        return {
            instanceName: 'string',
            categoryId: 'number',
            productId: 'string',
            picName: 'string',
            picContent: 'string',
            crop: 'boolean',
            region: 'string',
            customContent: 'string',
            intAttr: 'number',
            strAttr: 'string',
        };
    }
}
exports.AddImageRequest = AddImageRequest;
class AddImageAdvanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            picContentObject: 'PicContentObject',
            instanceName: 'InstanceName',
            categoryId: 'CategoryId',
            productId: 'ProductId',
            picName: 'PicName',
            crop: 'Crop',
            region: 'Region',
            customContent: 'CustomContent',
            intAttr: 'IntAttr',
            strAttr: 'StrAttr',
        };
    }
    static types() {
        return {
            picContentObject: 'Readable',
            instanceName: 'string',
            categoryId: 'number',
            productId: 'string',
            picName: 'string',
            crop: 'boolean',
            region: 'string',
            customContent: 'string',
            intAttr: 'number',
            strAttr: 'string',
        };
    }
}
exports.AddImageAdvanceRequest = AddImageAdvanceRequest;
class AddImageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'Message',
            requestId: 'RequestId',
            code: 'Code',
            picInfo: 'PicInfo',
            success: 'Success',
        };
    }
    static types() {
        return {
            message: 'string',
            requestId: 'string',
            code: 'number',
            picInfo: AddImageResponseBodyPicInfo,
            success: 'boolean',
        };
    }
}
exports.AddImageResponseBody = AddImageResponseBody;
class AddImageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddImageResponseBody,
        };
    }
}
exports.AddImageResponse = AddImageResponse;
class SearchImageByPicRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryId: 'CategoryId',
            instanceName: 'InstanceName',
            picContent: 'PicContent',
            crop: 'Crop',
            region: 'Region',
            num: 'Num',
            start: 'Start',
            type: 'Type',
            filter: 'Filter',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            instanceName: 'string',
            picContent: 'string',
            crop: 'boolean',
            region: 'string',
            num: 'number',
            start: 'number',
            type: 'string',
            filter: 'string',
        };
    }
}
exports.SearchImageByPicRequest = SearchImageByPicRequest;
class SearchImageByPicAdvanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            picContentObject: 'PicContentObject',
            categoryId: 'CategoryId',
            instanceName: 'InstanceName',
            crop: 'Crop',
            region: 'Region',
            num: 'Num',
            start: 'Start',
            type: 'Type',
            filter: 'Filter',
        };
    }
    static types() {
        return {
            picContentObject: 'Readable',
            categoryId: 'number',
            instanceName: 'string',
            crop: 'boolean',
            region: 'string',
            num: 'number',
            start: 'number',
            type: 'string',
            filter: 'string',
        };
    }
}
exports.SearchImageByPicAdvanceRequest = SearchImageByPicAdvanceRequest;
class SearchImageByPicResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            msg: 'Msg',
            head: 'Head',
            requestId: 'RequestId',
            auctions: 'Auctions',
            code: 'Code',
            picInfo: 'PicInfo',
            success: 'Success',
        };
    }
    static types() {
        return {
            msg: 'string',
            head: SearchImageByPicResponseBodyHead,
            requestId: 'string',
            auctions: { 'type': 'array', 'itemType': SearchImageByPicResponseBodyAuctions },
            code: 'number',
            picInfo: SearchImageByPicResponseBodyPicInfo,
            success: 'boolean',
        };
    }
}
exports.SearchImageByPicResponseBody = SearchImageByPicResponseBody;
class SearchImageByPicResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SearchImageByPicResponseBody,
        };
    }
}
exports.SearchImageByPicResponse = SearchImageByPicResponse;
class SearchImageByNameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryId: 'CategoryId',
            instanceName: 'InstanceName',
            productId: 'ProductId',
            picName: 'PicName',
            num: 'Num',
            start: 'Start',
            type: 'Type',
            filter: 'Filter',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            instanceName: 'string',
            productId: 'string',
            picName: 'string',
            num: 'number',
            start: 'number',
            type: 'string',
            filter: 'string',
        };
    }
}
exports.SearchImageByNameRequest = SearchImageByNameRequest;
class SearchImageByNameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            msg: 'Msg',
            head: 'Head',
            requestId: 'RequestId',
            auctions: 'Auctions',
            code: 'Code',
            picInfo: 'PicInfo',
            success: 'Success',
        };
    }
    static types() {
        return {
            msg: 'string',
            head: SearchImageByNameResponseBodyHead,
            requestId: 'string',
            auctions: { 'type': 'array', 'itemType': SearchImageByNameResponseBodyAuctions },
            code: 'number',
            picInfo: SearchImageByNameResponseBodyPicInfo,
            success: 'boolean',
        };
    }
}
exports.SearchImageByNameResponseBody = SearchImageByNameResponseBody;
class SearchImageByNameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SearchImageByNameResponseBody,
        };
    }
}
exports.SearchImageByNameResponse = SearchImageByNameResponse;
class AddImageResponseBodyPicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            region: 'Region',
            categoryId: 'CategoryId',
        };
    }
    static types() {
        return {
            region: 'string',
            categoryId: 'number',
        };
    }
}
exports.AddImageResponseBodyPicInfo = AddImageResponseBodyPicInfo;
class SearchImageByPicResponseBodyHead extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docsFound: 'DocsFound',
            docsReturn: 'DocsReturn',
            searchTime: 'SearchTime',
        };
    }
    static types() {
        return {
            docsFound: 'number',
            docsReturn: 'number',
            searchTime: 'number',
        };
    }
}
exports.SearchImageByPicResponseBodyHead = SearchImageByPicResponseBodyHead;
class SearchImageByPicResponseBodyAuctions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            picName: 'PicName',
            intAttr: 'IntAttr',
            categoryId: 'CategoryId',
            productId: 'ProductId',
            strAttr: 'StrAttr',
            sortExprValues: 'SortExprValues',
            customContent: 'CustomContent',
            score: 'Score',
        };
    }
    static types() {
        return {
            picName: 'string',
            intAttr: 'number',
            categoryId: 'number',
            productId: 'string',
            strAttr: 'string',
            sortExprValues: 'string',
            customContent: 'string',
            score: 'number',
        };
    }
}
exports.SearchImageByPicResponseBodyAuctions = SearchImageByPicResponseBodyAuctions;
class SearchImageByPicResponseBodyPicInfoMultiRegion extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            region: 'Region',
        };
    }
    static types() {
        return {
            region: 'string',
        };
    }
}
exports.SearchImageByPicResponseBodyPicInfoMultiRegion = SearchImageByPicResponseBodyPicInfoMultiRegion;
class SearchImageByPicResponseBodyPicInfoAllCategories extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            id: 'Id',
        };
    }
    static types() {
        return {
            name: 'string',
            id: 'number',
        };
    }
}
exports.SearchImageByPicResponseBodyPicInfoAllCategories = SearchImageByPicResponseBodyPicInfoAllCategories;
class SearchImageByPicResponseBodyPicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            region: 'Region',
            categoryId: 'CategoryId',
            multiRegion: 'MultiRegion',
            allCategories: 'AllCategories',
        };
    }
    static types() {
        return {
            region: 'string',
            categoryId: 'number',
            multiRegion: { 'type': 'array', 'itemType': SearchImageByPicResponseBodyPicInfoMultiRegion },
            allCategories: { 'type': 'array', 'itemType': SearchImageByPicResponseBodyPicInfoAllCategories },
        };
    }
}
exports.SearchImageByPicResponseBodyPicInfo = SearchImageByPicResponseBodyPicInfo;
class SearchImageByNameResponseBodyHead extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docsFound: 'DocsFound',
            docsReturn: 'DocsReturn',
            searchTime: 'SearchTime',
        };
    }
    static types() {
        return {
            docsFound: 'number',
            docsReturn: 'number',
            searchTime: 'number',
        };
    }
}
exports.SearchImageByNameResponseBodyHead = SearchImageByNameResponseBodyHead;
class SearchImageByNameResponseBodyAuctions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            picName: 'PicName',
            intAttr: 'IntAttr',
            categoryId: 'CategoryId',
            productId: 'ProductId',
            strAttr: 'StrAttr',
            sortExprValues: 'SortExprValues',
            customContent: 'CustomContent',
            score: 'Score',
        };
    }
    static types() {
        return {
            picName: 'string',
            intAttr: 'number',
            categoryId: 'number',
            productId: 'string',
            strAttr: 'string',
            sortExprValues: 'string',
            customContent: 'string',
            score: 'number',
        };
    }
}
exports.SearchImageByNameResponseBodyAuctions = SearchImageByNameResponseBodyAuctions;
class SearchImageByNameResponseBodyPicInfoMultiRegion extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            region: 'Region',
        };
    }
    static types() {
        return {
            region: 'string',
        };
    }
}
exports.SearchImageByNameResponseBodyPicInfoMultiRegion = SearchImageByNameResponseBodyPicInfoMultiRegion;
class SearchImageByNameResponseBodyPicInfoAllCategories extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            id: 'Id',
        };
    }
    static types() {
        return {
            name: 'string',
            id: 'number',
        };
    }
}
exports.SearchImageByNameResponseBodyPicInfoAllCategories = SearchImageByNameResponseBodyPicInfoAllCategories;
class SearchImageByNameResponseBodyPicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            region: 'Region',
            categoryId: 'CategoryId',
            multiRegion: 'MultiRegion',
            allCategories: 'AllCategories',
        };
    }
    static types() {
        return {
            region: 'string',
            categoryId: 'number',
            multiRegion: { 'type': 'array', 'itemType': SearchImageByNameResponseBodyPicInfoMultiRegion },
            allCategories: { 'type': 'array', 'itemType': SearchImageByNameResponseBodyPicInfoAllCategories },
        };
    }
}
exports.SearchImageByNameResponseBodyPicInfo = SearchImageByNameResponseBodyPicInfo;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("imagesearch", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async deleteImageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteImage", "2020-12-14", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteImageResponse({}));
    }
    async deleteImage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteImageWithOptions(request, runtime);
    }
    async addImageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddImage", "2020-12-14", "HTTPS", "POST", "AK", "json", req, runtime), new AddImageResponse({}));
    }
    async addImage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addImageWithOptions(request, runtime);
    }
    async addImageAdvance(request, runtime) {
        // Step 0: init client
        let accessKeyId = await this._credential.getAccessKeyId();
        let accessKeySecret = await this._credential.getAccessKeySecret();
        let authConfig = new $RPC.Config({
            accessKeyId: accessKeyId,
            accessKeySecret: accessKeySecret,
            type: "access_key",
            endpoint: "openplatform.aliyuncs.com",
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let authClient = new openplatform20191219_1.default(authConfig);
        let authRequest = new $OpenPlatform.AuthorizeFileUploadRequest({
            product: "ImageSearch",
            regionId: this._regionId,
        });
        let authResponse = new $OpenPlatform.AuthorizeFileUploadResponse({});
        let ossConfig = new $OSS.Config({
            accessKeySecret: accessKeySecret,
            type: "access_key",
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let ossClient = null;
        let fileObj = new $FileForm.FileField({});
        let ossHeader = new $OSS.PostObjectRequestHeader({});
        let uploadRequest = new $OSS.PostObjectRequest({});
        let ossRuntime = new $OSSUtil.RuntimeOptions({});
        openapi_util_1.default.convert(runtime, ossRuntime);
        let addImageReq = new AddImageRequest({});
        openapi_util_1.default.convert(request, addImageReq);
        authResponse = await authClient.authorizeFileUploadWithOptions(authRequest, runtime);
        ossConfig.accessKeyId = authResponse.accessKeyId;
        ossConfig.endpoint = openapi_util_1.default.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, this._endpointType);
        ossClient = new oss_client_1.default(ossConfig);
        fileObj = new $FileForm.FileField({
            filename: authResponse.objectKey,
            content: request.picContentObject,
            contentType: "",
        });
        ossHeader = new $OSS.PostObjectRequestHeader({
            accessKeyId: authResponse.accessKeyId,
            policy: authResponse.encodedPolicy,
            signature: authResponse.signature,
            key: authResponse.objectKey,
            file: fileObj,
            successActionStatus: "201",
        });
        uploadRequest = new $OSS.PostObjectRequest({
            bucketName: authResponse.bucket,
            header: ossHeader,
        });
        await ossClient.postObject(uploadRequest, ossRuntime);
        addImageReq.picContent = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
        let addImageResp = await this.addImageWithOptions(addImageReq, runtime);
        return addImageResp;
    }
    async searchImageByPicWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SearchImageByPic", "2020-12-14", "HTTPS", "POST", "AK", "json", req, runtime), new SearchImageByPicResponse({}));
    }
    async searchImageByPic(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchImageByPicWithOptions(request, runtime);
    }
    async searchImageByPicAdvance(request, runtime) {
        // Step 0: init client
        let accessKeyId = await this._credential.getAccessKeyId();
        let accessKeySecret = await this._credential.getAccessKeySecret();
        let authConfig = new $RPC.Config({
            accessKeyId: accessKeyId,
            accessKeySecret: accessKeySecret,
            type: "access_key",
            endpoint: "openplatform.aliyuncs.com",
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let authClient = new openplatform20191219_1.default(authConfig);
        let authRequest = new $OpenPlatform.AuthorizeFileUploadRequest({
            product: "ImageSearch",
            regionId: this._regionId,
        });
        let authResponse = new $OpenPlatform.AuthorizeFileUploadResponse({});
        let ossConfig = new $OSS.Config({
            accessKeySecret: accessKeySecret,
            type: "access_key",
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let ossClient = null;
        let fileObj = new $FileForm.FileField({});
        let ossHeader = new $OSS.PostObjectRequestHeader({});
        let uploadRequest = new $OSS.PostObjectRequest({});
        let ossRuntime = new $OSSUtil.RuntimeOptions({});
        openapi_util_1.default.convert(runtime, ossRuntime);
        let searchImageByPicReq = new SearchImageByPicRequest({});
        openapi_util_1.default.convert(request, searchImageByPicReq);
        authResponse = await authClient.authorizeFileUploadWithOptions(authRequest, runtime);
        ossConfig.accessKeyId = authResponse.accessKeyId;
        ossConfig.endpoint = openapi_util_1.default.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, this._endpointType);
        ossClient = new oss_client_1.default(ossConfig);
        fileObj = new $FileForm.FileField({
            filename: authResponse.objectKey,
            content: request.picContentObject,
            contentType: "",
        });
        ossHeader = new $OSS.PostObjectRequestHeader({
            accessKeyId: authResponse.accessKeyId,
            policy: authResponse.encodedPolicy,
            signature: authResponse.signature,
            key: authResponse.objectKey,
            file: fileObj,
            successActionStatus: "201",
        });
        uploadRequest = new $OSS.PostObjectRequest({
            bucketName: authResponse.bucket,
            header: ossHeader,
        });
        await ossClient.postObject(uploadRequest, ossRuntime);
        searchImageByPicReq.picContent = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
        let searchImageByPicResp = await this.searchImageByPicWithOptions(searchImageByPicReq, runtime);
        return searchImageByPicResp;
    }
    async searchImageByNameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SearchImageByName", "2020-12-14", "HTTPS", "POST", "AK", "json", req, runtime), new SearchImageByNameResponse({}));
    }
    async searchImageByName(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.searchImageByNameWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map