/// <reference types="node" />
/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class DeleteImageRequest extends $tea.Model {
    instanceName?: string;
    productId?: string;
    picName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteImageResponseBody extends $tea.Model {
    message?: string;
    requestId?: string;
    code?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteImageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddImageRequest extends $tea.Model {
    instanceName?: string;
    categoryId?: number;
    productId?: string;
    picName?: string;
    picContent?: string;
    crop?: boolean;
    region?: string;
    customContent?: string;
    intAttr?: number;
    strAttr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddImageAdvanceRequest extends $tea.Model {
    picContentObject: Readable;
    instanceName?: string;
    categoryId?: number;
    productId?: string;
    picName?: string;
    crop?: boolean;
    region?: string;
    customContent?: string;
    intAttr?: number;
    strAttr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddImageResponseBody extends $tea.Model {
    message?: string;
    requestId?: string;
    code?: number;
    picInfo?: AddImageResponseBodyPicInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddImageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicRequest extends $tea.Model {
    categoryId?: number;
    instanceName?: string;
    picContent?: string;
    crop?: boolean;
    region?: string;
    num?: number;
    start?: number;
    type?: string;
    filter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicAdvanceRequest extends $tea.Model {
    picContentObject: Readable;
    categoryId?: number;
    instanceName?: string;
    crop?: boolean;
    region?: string;
    num?: number;
    start?: number;
    type?: string;
    filter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponseBody extends $tea.Model {
    msg?: string;
    head?: SearchImageByPicResponseBodyHead;
    requestId?: string;
    auctions?: SearchImageByPicResponseBodyAuctions[];
    code?: number;
    picInfo?: SearchImageByPicResponseBodyPicInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SearchImageByPicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameRequest extends $tea.Model {
    categoryId?: number;
    instanceName?: string;
    productId?: string;
    picName?: string;
    num?: number;
    start?: number;
    type?: string;
    filter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponseBody extends $tea.Model {
    msg?: string;
    head?: SearchImageByNameResponseBodyHead;
    requestId?: string;
    auctions?: SearchImageByNameResponseBodyAuctions[];
    code?: number;
    picInfo?: SearchImageByNameResponseBodyPicInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SearchImageByNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddImageResponseBodyPicInfo extends $tea.Model {
    region?: string;
    categoryId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponseBodyHead extends $tea.Model {
    docsFound?: number;
    docsReturn?: number;
    searchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponseBodyAuctions extends $tea.Model {
    picName?: string;
    intAttr?: number;
    categoryId?: number;
    productId?: string;
    strAttr?: string;
    sortExprValues?: string;
    customContent?: string;
    score?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponseBodyPicInfoMultiRegion extends $tea.Model {
    region?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponseBodyPicInfoAllCategories extends $tea.Model {
    name?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByPicResponseBodyPicInfo extends $tea.Model {
    region?: string;
    categoryId?: number;
    multiRegion?: SearchImageByPicResponseBodyPicInfoMultiRegion[];
    allCategories?: SearchImageByPicResponseBodyPicInfoAllCategories[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponseBodyHead extends $tea.Model {
    docsFound?: number;
    docsReturn?: number;
    searchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponseBodyAuctions extends $tea.Model {
    picName?: string;
    intAttr?: number;
    categoryId?: number;
    productId?: string;
    strAttr?: string;
    sortExprValues?: string;
    customContent?: string;
    score?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponseBodyPicInfoMultiRegion extends $tea.Model {
    region?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponseBodyPicInfoAllCategories extends $tea.Model {
    name?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchImageByNameResponseBodyPicInfo extends $tea.Model {
    region?: string;
    categoryId?: number;
    multiRegion?: SearchImageByNameResponseBodyPicInfoMultiRegion[];
    allCategories?: SearchImageByNameResponseBodyPicInfoAllCategories[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    deleteImageWithOptions(request: DeleteImageRequest, runtime: $Util.RuntimeOptions): Promise<DeleteImageResponse>;
    deleteImage(request: DeleteImageRequest): Promise<DeleteImageResponse>;
    addImageWithOptions(request: AddImageRequest, runtime: $Util.RuntimeOptions): Promise<AddImageResponse>;
    addImage(request: AddImageRequest): Promise<AddImageResponse>;
    addImageAdvance(request: AddImageAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<AddImageResponse>;
    searchImageByPicWithOptions(request: SearchImageByPicRequest, runtime: $Util.RuntimeOptions): Promise<SearchImageByPicResponse>;
    searchImageByPic(request: SearchImageByPicRequest): Promise<SearchImageByPicResponse>;
    searchImageByPicAdvance(request: SearchImageByPicAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<SearchImageByPicResponse>;
    searchImageByNameWithOptions(request: SearchImageByNameRequest, runtime: $Util.RuntimeOptions): Promise<SearchImageByNameResponse>;
    searchImageByName(request: SearchImageByNameRequest): Promise<SearchImageByNameResponse>;
}
